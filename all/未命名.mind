{"root":{"data":{"id":"d7zuph5gb8g0","created":1740316487249,"text":"MySQL","priority":null},"children":[{"data":{"id":"d7zupj5ub3k0","created":1740316491626,"text":"存储引擎"},"children":[{"data":{"id":"d7zutfsrejc0","created":1740316797762,"text":"innoDB","expandState":"collapse"},"children":[{"data":{"id":"d7zuwsjz0go0","created":1740317060621,"text":"1.支持事务（一个事务就是一组不可分割的数据库操作，要么全部成功要么全部失败）、行级锁（允许对单个记录进行锁定，不影响表中其他行被其他事务访问或修改，提供高并发性能）和外键（一般互联网项目都不使用外键，不稳定）"},"children":[]},{"data":{"id":"d7zuwsjzv6g0","created":1740317060622,"text":"2.数据以聚簇索引的方式存储，提高检索效率"},"children":[{"data":{"id":"d7zuwsjzy540","created":1740317060622,"text":"聚簇索引："},"children":[{"data":{"id":"d7zuwsjzt940","created":1740317060622,"text":"索引叶子结点存储的是数据行，可以直接访问完整数据。非叶子节点存储的是主键（也可以说是主键值，索引键值【因为它默认使用主键当索引键】，它存储主键的范围值，如【1，5】，用于划分子节点的范围）和页号（也就是，指向子节点的指针）。"},"children":[]},{"data":{"id":"d7zuwsjzsmg0","created":1740317060622,"text":"每个表只能有一个聚簇索引，通常是主键索引，适合范围查询和排序。"},"children":[]}]},{"data":{"id":"d7zuwsjzjjs0","created":1740317060622,"text":"非聚簇索引："},"children":[{"data":{"id":"d7zuwsjzxls0","created":1740317060622,"text":"索引叶子节点存储的是数据行的主键和对应的索引列，需通过主键才能访问完整的数据行。非叶子节点存储的是主键（也可以说是主键值，索引键值【因为它默认使用主键当索引键】，它存储主键的范围值，如【1，5】，用于划分子节点的范围）和页号（也就是，指向子节点的指针）。。"},"children":[]},{"data":{"id":"d7zuwsjzy2o0","created":1740317060622,"text":"一个表可以有多个非聚簇索引（也称之为非主键索引、辅助索引、二级索引），适用于快速查找特定列的数据。"},"children":[]}]},{"data":{"id":"d7zuwsjzj800","created":1740317060622,"text":"关于回表"},"children":[{"data":{"id":"d7zuwsk0ahs0","created":1740317060623,"text":"那么什么是回表呢？简单来说，使用二级索引（非聚簇索引）作为查询条件的时候，由于它只存储索引字段的值和对应的主键值，无法获得其它的数据；如果需要查询数据行中的其它数据，需要根据关联的id回到聚簇索引中进行二次查询，这个过程就叫回表。"},"children":[{"data":{"id":"d7zuwsk0bm00","created":1740317060623,"text":"回表查询的详细过程："},"children":[{"data":{"id":"d7zuwsk059s0","created":1740317060623,"text":"1.在非聚簇索引的B+ Tree中查询，根据查询字段找到对应的叶子节点，获取里面的主键值"},"children":[]},{"data":{"id":"d7zuwsk069k0","created":1740317060623,"text":"2.在聚簇索引的B+ Tree中查询，根据第1步拿到的主键值定位对应的叶子节点，获取完整数据记录。"},"children":[]}]}]},{"data":{"id":"d7zuwsk021s0","created":1740317060623,"text":"回表的缺点"},"children":[{"data":{"id":"d7zuwsk0icw0","created":1740317060623,"text":"回表不仅仅意味着多查询一次，主要会带来随机I/O，因为回的时候，通过id去主键索引查询的时候，id肯定是不连续的（例如查询的是age=20，在age索引中年龄是有序的，但是对应的id是无序的），所以主键所以需要频繁查询会造成大量的随机I/O，随机I/O查询速度慢，所以频繁回表的效率低。表"},"children":[]}]},{"data":{"id":"d7zuwsk0h7s0","created":1740317060623,"text":"如何减少回表呢？"},"children":[{"data":{"id":"d7zuwsk01i80","created":1740317060623,"text":"1.索引覆盖"},"children":[{"data":{"id":"d7zuwsk02b40","created":1740317060623,"text":"简单理解，尽量少写select *这样的全查询，只写真正需要的列字段，避免引发不必要的回表操作。"},"children":[]},{"data":{"id":"d7zuwsk0h9s0","created":1740317060623,"text":"当使用非聚簇索引进行查询的时候，如果查询所需的列数据完全可以在所有中找到，而不需要回表（根据主键到聚簇索引里面进行查询），这种情况被称为索引覆盖。"},"children":[]}]},{"data":{"id":"d7zuwsk0fd40","created":1740317060623,"text":"2.索引下推(icp)"},"children":[{"data":{"id":"d7zuwsk072w0","created":1740317060623,"text":"索引下推是一种在联合索引上减少回表查询，提高查询效率的技术。它是5.6版本之后推出的一个概念。"},"children":[]},{"data":{"id":"d7zuwsjzzug0","created":1740317060623,"text":"它允许数据库存储引擎在存储层直接应用WHERE子句中的过滤条件，而不是将所有匹配数据行返回给查询处理层（server层）再进行过滤。因此它能在使用索引时减少回表查询次数，提高查询效率。"},"children":[]},{"data":{"id":"d7zuwsk0kc80","created":1740317060623,"text":"它允许MySQL在使用索引查找数据时，将WHERE字句中的过滤条件下推到存储引擎层过滤，从而减少需要从表中读取的数据行，减少了I/O（本该由Server层做操作，交由存储引擎层因此叫“下推”）。"},"children":[]}]}]}]}]},{"data":{"id":"d7zuwsk0g2w0","created":1740317060623,"text":"3.支持数据库崩溃后的安全恢复（通过redo log实现）"},"children":[]},{"data":{"id":"d7zuwsk0xiw0","created":1740317060624,"text":"4.适合的业务场景：高并发读写应用（如社交媒体账号、在线票务预订等等，利用行级锁机制有效减少锁冲突，提高并发处理能力）、事务处理系统（银行转账、电商订单处理等等，利用事务处理能力，保证数据的幂等性）、数据可靠性高的场景（如客户信息维护、财务数据等等，利用redo log的安全恢复机制）"},"children":[]}]},{"data":{"id":"d7zutjtgj6o0","created":1740316806511,"text":"myisam","expandState":"collapse"},"children":[{"data":{"id":"d7zux5jstew0","created":1740317088909,"text":"1.不支持外键和事务，不支持行级锁，支持表级锁（执行操作时会锁定整张表）"},"children":[]},{"data":{"id":"d7zux5jtsm80","created":1740317088910,"text":"2.索引文件和数据文件是分离的（即索引的叶子节点包含指向数据记录的指针）"},"children":[]},{"data":{"id":"d7zux5jtwd40","created":1740317088910,"text":"3.不支持数据库崩溃后的安全恢复"},"children":[]},{"data":{"id":"d7zux5jttiw0","created":1740317088910,"text":"4.适合的业务场景：读多写少的应用，读密集型应用（如新闻网站、博客系统等等，通常以读取数据为主）"},"children":[]}]}]},{"data":{"id":"d7zux9kvmw00","created":1740317097681,"text":"分支主题"},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}